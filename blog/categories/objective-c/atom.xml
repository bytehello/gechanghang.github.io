<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | Gchang]]></title>
  <link href="http://gechanghang.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://gechanghang.github.io/"/>
  <updated>2015-10-11T10:33:30+08:00</updated>
  <id>http://gechanghang.github.io/</id>
  <author>
    <name><![CDATA[gchang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Object-C 2.0 tips_1]]></title>
    <link href="http://gechanghang.github.io/blog/2015/10/11/effective-object-c-2-dot-0-tips-1/"/>
    <updated>2015-10-11T10:30:35+08:00</updated>
    <id>http://gechanghang.github.io/blog/2015/10/11/effective-object-c-2-dot-0-tips-1</id>
    <content type="html"><![CDATA[<h1>Effective Objective-C 2.0 tips_1</h1>

<p>Objective-C 是C语言的超集，C语言可用的语法在OC中也是适用的。</p>

<h2>C和OC的区别</h2>

<ol>
<li>C语言是函数调用，OC是消息发送</li>
<li>由第一点而来的不同就是：C语言这种采用函数调用的语言，是在运行时采用“虚方法表”的方式来确定该执行哪个函数；而OC是采用动态时绑定的方式来实现，也就是说只有在运行时才去查找要执行的方法，<strong>而且</strong>消息的接受对象也是运行时才能确定e</li>
</ol>


<h2>OC的动态绑定</h2>

<p>OC所能实现的运行时动态绑定是有<strong>运行时组件</strong>来完成的。<strong>运行时组件</strong>包含了OC中所有动态绑定需要的数据结构等等</p>

<h2>更好的理解OC</h2>

<p>如下面</p>

<pre><code>NSString *string = @"Hello World"
</code></pre>

<p>申明了一个<strong>string</strong>，<strong>string</strong>指向NSString的对象。它表示的是分配在堆中的一块内存，该内存里面保存了NSString对象</p>
]]></content>
  </entry>
  
</feed>
