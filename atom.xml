<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gchang]]></title>
  <link href="http://gechanghang.github.io/atom.xml" rel="self"/>
  <link href="http://gechanghang.github.io/"/>
  <updated>2015-11-14T15:01:07+08:00</updated>
  <id>http://gechanghang.github.io/</id>
  <author>
    <name><![CDATA[gchang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://gechanghang.github.io/blog/2015/11/14/test/"/>
    <updated>2015-11-14T14:59:48+08:00</updated>
    <id>http://gechanghang.github.io/blog/2015/11/14/test</id>
    <content type="html"><![CDATA[<p>hello</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP简要]]></title>
    <link href="http://gechanghang.github.io/blog/2015/10/22/httpjian-yao/"/>
    <updated>2015-10-22T14:56:42+08:00</updated>
    <id>http://gechanghang.github.io/blog/2015/10/22/httpjian-yao</id>
    <content type="html"><![CDATA[<h1>HTTP协议简要</h1>

<p>HTTP是开发中经常用到的从网路获取数据的一种通信协议。</p>

<h2>HTTP简单介绍</h2>

<p>在移动开发中，client（手机端）是发送消息给server（服务器），而且永远是手机端发送给服务器端。手机端不向服务器发送数据，服务器也就不会返回数据</p>

<p>跟SOCKET最主要的区别就是：socket是一种手机端和服务器端的连接不断开的协议，打个比方，QQ的服务器会与手机建立socket通信，确保一有消息，就会发送给客户端。</p>

<h2>HTTP请求</h2>

<p>HTTP主要常用分为两种
- GET : 就是从服务器索取数据
- POST : 提交数据给服务器，让服务器返回数据</p>

<p><strong>HTTP的请求格式如下</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;request-line&gt;
</span><span class='line'>&lt;request-header&gt;
</span><span class='line'>&lt;blank-line&gt;
</span><span class='line'>&lt;request-body&gt;</span></code></pre></td></tr></table></div></figure>


<p>说明:第一行必须是一个请求行(request-line),用来说明请求类型,要访问的资源以及所使用的HTTP版本.
 紧接着是一个首部(header)小节,用来说明服务器要使用的附加信息.
  之后是一个空行.
再后面可以添加任意的其他数据<strong>称之为主体(body)</strong>.</p>

<p>HTTP请求包含了<strong>请求头(header)</strong> 和 <strong>请求体(body)</strong>
body只有对POST才有效。
请求头里面包括了一些请求的参数，是以<strong>key:value</strong>的形式
形如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Accept: text/html
</span><span class='line'>Accept-Charset: GBK,utf-8
</span><span class='line'>Accept-Encoding: gzip.deflate
</span><span class='line'>Accept-Language:zh-CN,zh;</span></code></pre></td></tr></table></div></figure>


<p>而请求体包含了要提交给服务器的数据，形如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username=gch&pwd=gechanghang</span></code></pre></td></tr></table></div></figure>


<h2>HTTP响应</h2>

<p>与请求相对应的就是响应，同样的，也包括了响应头和响应体。</p>

<p><strong>HTTP响应格式如下</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;status-line&gt;
</span><span class='line'>&lt;header&gt;
</span><span class='line'>&lt;blank-line&gt;
</span><span class='line'>&lt;body&gt;</span></code></pre></td></tr></table></div></figure>


<p>HTTP状态码如果为200，则表示为一切正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Object-C 2.0 tips_1]]></title>
    <link href="http://gechanghang.github.io/blog/2015/10/11/effective-object-c-2-dot-0-tips-1/"/>
    <updated>2015-10-11T10:30:35+08:00</updated>
    <id>http://gechanghang.github.io/blog/2015/10/11/effective-object-c-2-dot-0-tips-1</id>
    <content type="html"><![CDATA[<h1>Effective Objective-C 2.0 tips_1</h1>

<p>Objective-C 是C语言的超集，C语言可用的语法在OC中也是适用的。</p>

<h2>C和OC的区别</h2>

<ol>
<li>C语言是函数调用，OC是消息发送</li>
<li>由第一点而来的不同就是：C语言这种采用函数调用的语言，是在运行时采用“虚方法表”的方式来确定该执行哪个函数；而OC是采用动态时绑定的方式来实现，也就是说只有在运行时才去查找要执行的方法，<strong>而且</strong>消息的接受对象也是运行时才能确定e</li>
</ol>


<h2>OC的动态绑定</h2>

<p>OC所能实现的运行时动态绑定是有<strong>运行时组件</strong>来完成的。<strong>运行时组件</strong>包含了OC中所有动态绑定需要的数据结构等等</p>

<h2>更好的理解OC</h2>

<p>如下面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *string = @"Hello World"
</span></code></pre></td></tr></table></div></figure>


<p>申明了一个<strong>string</strong>，<strong>string</strong>指向NSString的对象。它表示的是分配在堆中的一块内存，该内存里面保存了NSString对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用NSDateFormatter指定时间]]></title>
    <link href="http://gechanghang.github.io/blog/2015/10/04/ru-he-shi-yong-nsdateformatterzhi-ding-shi-jian/"/>
    <updated>2015-10-04T23:39:40+08:00</updated>
    <id>http://gechanghang.github.io/blog/2015/10/04/ru-he-shi-yong-nsdateformatterzhi-ding-shi-jian</id>
    <content type="html"><![CDATA[<h1>如何指定NSDate的具体时间</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *setDateString = @"2015-01-19";
</span><span class='line'>NSDateFormatter *parser = [[NSDateFormatter alloc] init];
</span><span class='line'>    [parser setDateFormat:@"yyyy-MM-dd"];
</span><span class='line'>NSDate *setDate = [parser dateFromString:setDateString];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog]]></title>
    <link href="http://gechanghang.github.io/blog/2015/10/03/blog/"/>
    <updated>2015-10-03T10:34:11+08:00</updated>
    <id>http://gechanghang.github.io/blog/2015/10/03/blog</id>
    <content type="html"><![CDATA[<h1>线性表 (一)</h1>

<h2>总览</h2>

<p>本文介绍了<strong>线性表</strong>的算法实现，包括顺序表、链表等</p>

<hr />

<h2>线性表</h2>

<h3>定义</h3>

<blockquote><p>零个或者多个数据元素的有限序列.</p></blockquote>

<p>这里需要强调的是两点：<strong>有限</strong> 和 <strong>序列</strong></p>

<h3>顺序存储结构</h3>

<p>顺序存储相当于我们之前学过的数组，很好理解</p>

<h4>定义数据类型</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="c1">//用C结构体构建基本的数据类型</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ElementType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
</span><span class='line'>    <span class="n">ElementType</span> <span class="n">Data</span><span class="p">[</span><span class="n">MAXSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Last</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">List</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>初始化</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="kt">int</span> <span class="nf">MakeEmpty</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="n">List</span> <span class="o">*</span><span class="n">Ptrl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//1.</span>
</span><span class='line'><span class="n">Ptrl</span> <span class="o">=</span> <span class="p">(</span><span class="n">List</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">List</span><span class="p">));</span>
</span><span class='line'><span class="c1">//2.</span>
</span><span class='line'><span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">Ptrl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1.分配空间，初始化指针
2.-1标志了此顺序表为空表</p>

<h4>查找操作</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="kt">int</span> <span class="nf">Find</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">n</span><span class="p">,</span><span class="n">List</span> <span class="o">*</span><span class="n">Ptrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Ptrk</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="o">&amp;&amp;</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">rerurn</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>插入操作</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="c1">//插入</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">List</span> <span class="o">*</span><span class="n">Ptrl</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//如果表满</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="o">==</span> <span class="n">MAXSIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;表满了&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//判断i的值是否合法</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;位置不合法&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>删除操作</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="c1">//删除</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">,</span><span class="n">List</span> <span class="o">*</span><span class="n">Ptrl</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//判读i的合法性</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;不存在滴%d个元素&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Ptrl</span><span class="o">-&gt;</span><span class="n">Last</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
